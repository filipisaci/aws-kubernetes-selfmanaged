- hosts: all
  become: true
  tasks:
    - name: Instalar dependências básicas
      apt:
        name: ['apt-transport-https', 'ca-certificates', 'curl', 'gnupg', 'lsb-release', 'gnupg2']
        state: present
        update_cache: yes

    - name: Desabilitar swap
      command: swapoff -a
      when: ansible_swaptotal_mb > 0

    - name: Remover swap do /etc/fstab
      replace:
        path: /etc/fstab
        regexp: '^([^#].*\s+swap\s+)'
        replace: '#\1'


    - name: Criar diretorio para GPG keys
      file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'

    - name: Baixar chave GPG do Kubernetes
      shell: |
        curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.30/deb/Release.key | gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
      args:
        creates: /etc/apt/keyrings/kubernetes-apt-keyring.gpg

    - name: Adicionar repositorio do Kubernetes
      apt_repository:
        repo: "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.30/deb/ /"
        state: present


    - name: Instalar kubelet, kubeadm, kubectl
      apt:
        name: ['kubelet', 'kubeadm', 'kubectl']
        state: present
        update_cache: yes

    - name: Marcar como hold kubelet, kubeadm, kubectl
      shell: "apt-mark hold kubelet kubeadm kubectl"

    - name: Instalar containerd
      apt:
        name: containerd
        state: present

    - name: Habilitar e iniciar containerd
      systemd:
        name: containerd
        enabled: yes
        state: started

- hosts: control_plane
  become: true
  tasks:

    - name: Adicionar modulos do kernel para o Containerd
      copy:
        dest: /etc/modules-load.d/containerd.conf
        content: |
          overlay
          br_netfilter

    - name: Carregar os modulos para o Containerd
      shell:
        cmd: modprobe overlay && modprobe br_netfilter
      become: true

    - name: Adicionar parametros do kernel para o Kubernetes
      copy:
        dest: /etc/sysctl.d/kubernetes.conf
        content: |
          net.bridge.bridge-nf-call-ip6tables = 1
          net.bridge.bridge-nf-call-iptables = 1
          net.ipv4.ip_forward = 1

    - name: Aplicar as configuracoes do sysctl
      command:
        cmd: sudo sysctl --system

    - name: Configurando o Containerd (gerando o arquivo de configuracao)
      command:
        cmd: sudo sh -c "containerd config default > /opt/containerd/config.toml"

    - name: Configurando o Containerd (Definindo a variavel SystemdCgroup como verdadeira)
      command:
        cmd: sudo sed -i 's/SystemdCgroup = false/SystemdCgroup = true/' /opt/containerd/config.toml

    - name: Reload das confs do systemd
      command:
        cmd: systemctl daemon-reload

    - name: Inicializar o cluster Kubernetes (kubeadm)
      shell: |
        kubeadm init --pod-network-cidr=192.168.0.0/16 --kubernetes-version 1.30.1
      args:
        creates: /etc/kubernetes/admin.conf

    - name: Copiar kubeconfig para o usuário
      shell: |
        mkdir -p /home/{{ ansible_user }}/.kube
        cp -f /etc/kubernetes/admin.conf /home/{{ ansible_user }}/.kube/config
        chown {{ ansible_user }}:{{ ansible_user }} /home/{{ ansible_user }}/.kube/config
      when: ansible_user != 'root'

    - name: Restart kubelet service
      service:
        name: kubelet
        state: restarted

    - name: Esperar o kube-apiserver responder na porta 6443
      wait_for:
        host: 127.0.0.1
        port: 6443
        delay: 15
        timeout: 60
      become: true

    - name: Instalar CNI
      become: false
      shell: |
        kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.29.1/manifests/tigera-operator.yaml && kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.29.1/manifests/custom-resources.yaml
      environment:
        KUBECONFIG: /home/{{ ansible_user }}/.kube/config

    - name: Obter token de join do cluster
      shell: kubeadm token create --print-join-command
      register: join_cmd
      changed_when: false

    - name: Salvar comando de join em arquivo
      local_action:
        module: copy
        content: "{{ join_cmd.stdout }}"
        dest: ./join-command.sh
      delegate_to: localhost
      become: false

- hosts: worker_node
  become: true
  tasks:
    - name: Ler comando de join do arquivo
      set_fact:
        join_cmd: "{{ lookup('file', './join-command.sh') }}"
      become: false

    - name: Ingressar no cluster Kubernetes
      shell: "{{ join_cmd }} --ignore-preflight-errors=all"
      args:
        creates: /var/lib/kubelet/kubeadm-flags.env
